"""Test Pabbly webhook integration with HTML email"""
import os
import requests
from dotenv import load_dotenv

load_dotenv()

webhook_url = os.getenv('PABBLY_WEBHOOK_URL')

if not webhook_url:
    print("ERROR: PABBLY_WEBHOOK_URL not set in .env")
    exit(1)

# Generate sample HTML email
sample_html = """<!DOCTYPE html>
<html>
<head>
    <style>
        body { font-family: Arial, sans-serif; background: #f5f7fa; margin: 0; padding: 20px; }
        .container { max-width: 900px; margin: 0 auto; background: white; border-radius: 10px; overflow: hidden; box-shadow: 0 4px 6px rgba(0,0,0,0.1); }
        .header { background: #f8f9fc; padding: 30px 20px; text-align: center; border-bottom: 3px solid #667eea; }
        .header h1 { margin: 0 0 10px 0; font-size: 28px; color: #000000; }
        .header p { margin: 0; font-size: 16px; color: #000000; }
        .summary { background: #f8f9fc; padding: 20px; margin: 20px; border-left: 5px solid #667eea; border-radius: 5px; }
        .badge { background: #dc3545; color: white; padding: 5px 15px; border-radius: 20px; font-weight: bold; }
        table { width: 100%; border-collapse: collapse; margin: 20px; font-size: 14px; }
        th { background: #667eea; color: white; padding: 12px; text-align: left; }
        td { padding: 12px; border-bottom: 1px solid #e9ecef; }
        .ticker { font-weight: bold; color: #667eea; }
        .drop { color: #dc3545; font-weight: bold; }
        .footer { background: #f8f9fc; padding: 20px; text-align: center; color: #6c757d; font-size: 13px; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üìä Stock Screener Alert - TEST</h1>
            <p>Stocks Down 30%+ from 5-Year All-Time High</p>
        </div>
        <div class="summary">
            <p><strong>üóìÔ∏è Date:</strong> 2025-10-07 12:00:00</p>
            <p><strong>üîî Total Alerts:</strong> <span class="badge">2</span> stocks found</p>
        </div>
        <table>
            <thead>
                <tr>
                    <th>Ticker</th>
                    <th>Current Price</th>
                    <th>5Y ATH</th>
                    <th>Drop %</th>
                    <th>ATH Date</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="ticker">AAPL</td>
                    <td>$150.50</td>
                    <td>$200.00</td>
                    <td class="drop">-24.8%</td>
                    <td>2024-01-15</td>
                </tr>
                <tr>
                    <td class="ticker">TSLA</td>
                    <td>$180.25</td>
                    <td>$300.00</td>
                    <td class="drop">-39.9%</td>
                    <td>2023-11-10</td>
                </tr>
            </tbody>
        </table>
        <div class="footer">
            <p><strong>ü§ñ TEST - Automated Stock Screener Report</strong></p>
            <p>Generated by Railway ¬∑ Data from Alpaca Markets API</p>
        </div>
    </div>
</body>
</html>"""

# Test payload with HTML email
test_data = {
    "date": "2025-10-07 12:00:00",
    "alert_count": 2,
    "subject": "TEST: Stock Alert - 2 Stocks Down 30%+",
    "html_email": sample_html,  # NEW: Complete HTML email!
    "alerts": [
        {
            "ticker": "AAPL",
            "current_price": 150.50,
            "ath_5y": 200.00,
            "drop_pct": -24.8,
            "ath_date": "2024-01-15"
        },
        {
            "ticker": "TSLA",
            "current_price": 180.25,
            "ath_5y": 300.00,
            "drop_pct": -39.9,
            "ath_date": "2023-11-10"
        }
    ]
}

print("Testing Pabbly webhook...")
print(f"URL: {webhook_url[:50]}...")
print(f"Sending test data with {len(test_data['alerts'])} alerts...")
print(f"HTML email size: {len(sample_html)} characters")
print()

try:
    response = requests.post(webhook_url, json=test_data, timeout=30)
    response.raise_for_status()
    print(f"SUCCESS! Status code: {response.status_code}")
    print(f"Response: {response.text[:200]}")
    print()
    print("What was sent to Pabbly:")
    print(f"  - date: {test_data['date']}")
    print(f"  - alert_count: {test_data['alert_count']}")
    print(f"  - subject: {test_data['subject']}")
    print(f"  - html_email: Complete HTML ({len(sample_html)} chars)")
    print(f"  - alerts: Array with {len(test_data['alerts'])} stocks")
    print()
    print("In Pabbly, just use: {1. Html Email}")
    print("No Iterator needed!")
except Exception as e:
    print(f"FAILED: {e}")
